"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bloodRequestSchema_1 = __importDefault(require("../../models/blood/bloodRequestSchema"));
const findNearAvailableDonor_1 = __importDefault(require("../../handler/donor/findNearAvailableDonor"));
const savePatientDetails_1 = __importDefault(require("./savePatientDetails"));
const sendMailToDonor_1 = __importDefault(require("../../handler/donor/sendMailToDonor"));
const findNearFbDonar_1 = __importDefault(require("../../handler/facebookBotHandler/findNearFbDonar"));
const sendMessageToFbUser_1 = __importDefault(require("../../handler/facebookBotHandler/sendMessageToFbUser"));
const requestForBlood = async (req, res) => {
    const data = req.body;
    if (!data.hospitalId) {
        data.hospitalId = data.hospitalName;
    }
    try {
        const bloodRequest = await bloodRequestSchema_1.default.create(data);
        await bloodRequest.save();
        const latitude = parseFloat(data.latitude);
        const longitude = parseFloat(data.longitude);
        const donors = await (0, findNearAvailableDonor_1.default)(latitude, longitude, data.bloodGroup);
        const fbDonors = await (0, findNearFbDonar_1.default)(latitude, longitude, data.bloodGroup);
        const seekerLatitude = parseFloat(data.seekerLatitude);
        const seekerLongitude = parseFloat(data.seekerLongitude);
        await (0, savePatientDetails_1.default)(data.name, data.email, data.mobile, data.seekerDistrictId, data.seekerThanaId, data.seekerBloodGroup, seekerLatitude, seekerLongitude);
        const { results, successCount, failedCount } = await (0, sendMailToDonor_1.default)(donors, data);
        for (const donor of fbDonors) {
            await (0, sendMessageToFbUser_1.default)(donor.psId, `ЁЯй╕ *рж░ржХрзНрждрзЗрж░ ржкрзНрж░ржпрж╝рзЛржЬржи* ЁЯй╕\n\n` +
                `ЁЯФ┤ рж░ржХрзНрждрзЗрж░ ржЧрзНрж░рзБржк: ${data.bloodGroup}\n` +
                `ЁЯСд рж░рзЛржЧрзАрж░ ржирж╛ржо: ${data.patientName}\n` +
                `ЁЯй║ рж╕ржорж╕рзНржпрж╛: ${data.patientProblem}\n` +
                `ЁЯФв рж░рзЛржЧрзАрж░ ржмржпрж╝рж╕: ${data.patientAge}\n` +
                `тЪзя╕П рж▓рж┐ржЩрзНржЧ: ${data.patientGender}\n\n` +
                `ЁЯУ▒ ржпрзЛржЧрж╛ржпрзЛржЧ:\n` +
                `   тШОя╕П ржорзЛржмрж╛ржЗрж▓: ${data.mobile}\n` +
                `   тШОя╕П ржмрж┐ржХрж▓рзНржк ржиржорзНржмрж░: ${data.alternativeContact}\n\n` +
                `ЁЯУН ржЕржмрж╕рзНржерж╛ржи:\n` +
                `   ЁЯПЩя╕П ржЬрзЗрж▓рж╛: ${data.seekerDistrictId}\n` +
                `   ЁЯПШя╕П ржерж╛ржирж╛: ${data.seekerThanaId}\n\n` +
                `тП░ рж╕ржоржпрж╝рж╕рзВржЪрзА:\n` +
                `   ЁЯУЕ рждрж╛рж░рж┐ржЦ: ${data.requredDate}\n` +
                `   ЁЯХТ рж╕ржоржпрж╝: ${data.requredTime}\n\n` +
                `ЁЯЪи ржЬрж░рзБрж░рзАрждрж╛: ${data.urgencyLevel}\n\n` +
                `ржЖржкржирж╛рж░ рж╕рж╛рж╣рж╛ржпрзНржп ржПржХржЯрж┐ ржЬрзАржмржи ржмрж╛ржБржЪрж╛рждрзЗ ржкрж╛рж░рзЗред ржжржпрж╝рж╛ ржХрж░рзЗ рж╕рж╛ржбрж╝рж╛ ржжрж┐ржиред` +
                `\n\n` +
                `ЁЯСЙ ржПржЗ ржкрзНрж░ржпрж╝рзЛржЬржирзЗрж░ ржЬржирзНржп ржЖржкржирж╛рж░ рж╕рж╛рж╣рж╛ржпрзНржп ржПржХржЯрж┐ ржЬрзАржмржи ржмрж╛ржБржЪрж╛рждрзЗ ржкрж╛рж░рзЗред ржжржпрж╝рж╛ ржХрж░рзЗ рж╕рж╛ржбрж╝рж╛ ржжрж┐ржиред` +
                `\n\n` +
                `ржЖрж░ржУ рж░ржХрзНрждрзЗрж░ ржЖржмрзЗржжржи ржжрзЗржЦрждрзЗ ржПржЦрж╛ржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи: ${process.env.FRONTEND_URL}/blood-request`);
        }
        res.status(200).json({
            success: true,
            message: `рж░ржХрзНрждрзЗрж░ ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ${successCount} ржЬржи ржжрж╛рждрж╛ржХрзЗ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ${failedCount > 0 ? `, ${failedCount} ржЬржи ржжрж╛рждрж╛рж░ ржХрж╛ржЫрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ рж╕ржлрж▓ рж╣ржпрж╝ржирж┐` : ''}`,
            data: {
                bloodRequest,
                emailResults: results
            }
        });
    }
    catch (error) {
        console.log(error);
        res.status(500).json({
            success: false,
            message: "рж░ржХрзНрждрзЗрж░ ржЕржирзБрж░рзЛржз рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрзНрж░рзЗрж░рж┐ржд рж╣ржпрж╝ржирж┐",
        });
    }
};
exports.default = requestForBlood;
